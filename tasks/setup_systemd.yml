---
- name: Install gunicorn
  ansible.builtin.pip:
    name: gunicorn
    extra_args: "--upgrade"
    virtualenv: "{{ peering_manager_virtualenv_path }}"
    virtualenv_command: "{{ peering_manager_python_binary }} -m venv"
  become: true
  become_user: "{{ peering_manager_user }}"
  register: pip_result
  until: pip_result is success

- name: Configure gunicorn
  ansible.builtin.template:
    src: gunicorn.py.j2
    dest: "{{ peering_manager_install_directory }}/gunicorn.py"
    owner: "{{ peering_manager_user }}"
    group: "{{ peering_manager_group }}"
    mode: "644"
  become: true
  notify:
    - Restart peering-manager

- name: Configure systemd service
  ansible.builtin.template:
    src: peering-manager.service.j2
    dest: "{{ peering_manager_systemd_directory }}/peering-manager.service"
    owner: root
    group: root
    mode: "644"
  become: true
  notify:
    - Reload systemd
    - Restart peering-manager

- name: Configure rqworker systemd service
  ansible.builtin.template:
    src: peering-manager-rqworker.service.j2
    dest: "{{ peering_manager_systemd_directory }}/peering-manager-rqworker.service"
    owner: root
    group: root
    mode: "644"
  become: true
  notify:
    - Reload systemd
    - Restart peering-manager
    - Restart peering-manager rqworker

- name: Configure scheduled tasks
  when: peering_manager_tasks is defined
  block:
    - name: Fail if timer command is not set
      ansible.builtin.fail:
        msg: Variable command is not defined
      when: item.value.enabled | bool and item.value.command is undefined
      with_dict: "{{ peering_manager_tasks }}"

    - name: Setup timer service file
      ansible.builtin.template:
        src: systemd_timer_service.j2
        dest: "{{ peering_manager_systemd_directory }}/{{ item.key }}.service"
        owner: root
        group: root
        mode: "644"
      with_dict: "{{ peering_manager_tasks }}"
      notify:
        - Reload systemd

    - name: Setup timer file
      ansible.builtin.template:
        src: systemd_timer.j2
        dest: "{{ peering_manager_systemd_directory }}/{{ item.key }}.timer"
        owner: root
        group: root
        mode: "644"
      with_dict: "{{ peering_manager_tasks }}"
      notify:
        - Reload systemd

    - name: Enable timer
      ansible.builtin.systemd:
        name: "{{ item.key }}.timer"
        state: started
        enabled: true
        masked: false
        scope: system
      when: item.value.enabled | bool
      with_dict: "{{ peering_manager_tasks }}"
      notify:
        - Reload systemd

    - name: Disable timer
      ansible.builtin.systemd:
        name: "{{ item.key }}.timer"
        state: stopped
        enabled: false
        masked: false
        scope: system
      when: not item.value.enabled | bool
      with_dict: "{{ peering_manager_tasks }}"
      notify:
        - Reload systemd
