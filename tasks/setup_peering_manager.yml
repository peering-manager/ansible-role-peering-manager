---
- name: Check if there is an existing installation
  ansible.builtin.stat:
    path: "{{ peering_manager_install_directory }}"
  register: peering_manager_installed

- name: Create the install directory
  ansible.builtin.file:
    path: "{{ peering_manager_install_directory }}"
    owner: "{{ peering_manager_user }}"
    group: "{{ peering_manager_group }}"
    state: directory
    mode: "755"
  become: true
  when: not peering_manager_installed.stat.exists

- name: Download using git
  ansible.builtin.git:
    repo: "{{ peering_manager_git_url }}"
    version: "{{ peering_manager_version }}"
    dest: "{{ peering_manager_install_directory }}"
  become: true
  become_user: "{{ peering_manager_user }}"
  register: peering_manager_downloaded

- name: Upgrade pip in virtualenv
  ansible.builtin.pip:
    name: pip
    extra_args: "--upgrade"
    virtualenv: "{{ peering_manager_virtualenv_path }}"
    virtualenv_command: "{{ peering_manager_python_binary }} -m venv"
  become: true
  become_user: "{{ peering_manager_user }}"
  register: pip_result
  until: pip_result is success

- name: Install Python requirements
  ansible.builtin.pip:
    requirements: "{{ peering_manager_install_directory }}/requirements.txt"
    extra_args: "--upgrade"
    virtualenv: "{{ peering_manager_virtualenv_path }}"
    virtualenv_command: "{{ peering_manager_python_binary }} -m venv"
  become: true
  become_user: "{{ peering_manager_user }}"
  register: pip_result
  until: pip_result is success
  notify:
    - Restart peering-manager
    - Restart peering-manager rqworker
  when: peering_manager_downloaded.changed

- name: Generate Python local requirements
  ansible.builtin.template:
    src: local_requirements.txt.j2
    dest: "{{ peering_manager_install_directory }}/local_requirements.txt"
    owner: "{{ peering_manager_user }}"
    group: "{{ peering_manager_group }}"
    mode: "644"
  register: local_requirements_file
  when: peering_manager_local_requirements | bool

- name: Install local requirements
  ansible.builtin.pip:
    requirements: "{{ peering_manager_install_directory }}/local_requirements.txt"
    extra_args: "--upgrade"
    virtualenv: "{{ peering_manager_virtualenv_path }}"
    virtualenv_command: "{{ peering_manager_python_binary }} -m venv"
  become: true
  become_user: "{{ peering_manager_user }}"
  register: pip_result
  until: pip_result is success
  notify:
    - Restart peering-manager
    - Restart peering-manager rqworker
  when: local_requirements_file.changed

- name: Setup secret key
  block:
    - name: Generate a secret key
      ansible.builtin.shell: |
        printf '{{ peering_manager_secretkey_script }}' | \
        {{ peering_manager_python_binary }} | \
        tr -d $'\n' > {{ peering_manager_install_directory }}/secret.key
      args:
        creates: "{{ peering_manager_install_directory }}/secret.key"
      become: true
      become_user: "{{ peering_manager_user }}"

    - name: Load secret key
      ansible.builtin.slurp:
        src: "{{ peering_manager_install_directory }}/secret.key"
      become: true
      become_user: "{{ peering_manager_user }}"
      register: __peering_manager_secret_key_file

    - name: Set secret key in configuration
      ansible.builtin.set_fact:
        peering_manager_config: "{{ peering_manager_config | combine({'SECRET_KEY': __peering_manager_secret_key_file['content'] | b64decode}) }}"

- name: Configure peering-manager
  ansible.builtin.template:
    src: configuration.py.j2
    dest: "{{ peering_manager_install_directory }}/peering_manager/configuration.py"
    owner: "{{ peering_manager_user }}"
    group: "{{ peering_manager_group }}"
    mode: "644"
  become: true
  become_user: "{{ peering_manager_user }}"
  notify:
    - Restart peering-manager

- name: Setup LDAP authentication
  when: peering_manager_setup_ldap_auth
  block:
    - name: Install django-auth-ldap
      ansible.builtin.pip:
        name: django-auth-ldap
        extra_args: "--upgrade"
        virtualenv: "{{ peering_manager_virtualenv_path }}"
        virtualenv_command: "{{ peering_manager_python_binary }} -m venv"
      become: true
      become_user: "{{ peering_manager_user }}"
      register: pip_result
      until: pip_result is success
    - name: Configure LDAP auth
      ansible.builtin.copy:
        content: "{{ peering_manager_ldap_config }}"
        dest: "{{ peering_manager_install_directory }}/peering_manager/ldap_config.py"
        owner: "{{ peering_manager_user }}"
        group: "{{ peering_manager_group }}"
        mode: "644"
      become: true
      become_user: "{{ peering_manager_user }}"
      notify:
        - Restart peering-manager

- name: Perform maintenance tasks
  when: peering_manager_downloaded.changed
  block:
    - name: Perform database migration
      community.general.django_manage:
        app_path: "{{ peering_manager_install_directory }}"
        command: migrate
        virtualenv: "{{ peering_manager_virtualenv_path }}"
      become: true
      become_user: "{{ peering_manager_user }}"
      notify:
        - Restart peering-manager
    - name: Remove stale content types
      community.general.django_manage:
        app_path: "{{ peering_manager_install_directory }}"
        command: remove_stale_contenttypes --noinput
        virtualenv: "{{ peering_manager_virtualenv_path }}"
      become: true
      become_user: "{{ peering_manager_user }}"
      notify:
        - Restart peering-manager
    - name: Remove expired user sessions
      community.general.django_manage:
        app_path: "{{ peering_manager_install_directory }}"
        command: clearsessions
        virtualenv: "{{ peering_manager_virtualenv_path }}"
      become: true
      become_user: "{{ peering_manager_user }}"
      notify:
        - Restart peering-manager
    - name: Collect static files
      community.general.django_manage:
        app_path: "{{ peering_manager_install_directory }}"
        command: collectstatic
        clear: true
        virtualenv: "{{ peering_manager_virtualenv_path }}"
      become: true
      become_user: "{{ peering_manager_user }}"

- name: Create super user
  ansible.builtin.shell: |
    printf '{{ peering_manager_superuser_script }}' | \
    {{ peering_manager_virtualenv_path }}/bin/python {{ peering_manager_install_directory }}/manage.py shell
  args:
    chdir: "{{ peering_manager_install_directory }}"
  become: true
  become_user: "{{ peering_manager_user }}"
  register: __peering_manager_superuser_result
  changed_when: "'changed' in __peering_manager_superuser_result.stdout"
  when: not peering_manager_installed.stat.exists
